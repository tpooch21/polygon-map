{"version":3,"sources":["components/Map/Map.js","components/Sidebar/Sidebar.js","App.js","serviceWorker.js","index.js"],"names":["Map","props","currentMapRef","useRef","HRef","map","polygonRef","useLayoutEffect","current","console","log","window","H","defaultLayers","service","Platform","apikey","createDefaultLayers","vector","normal","center","lat","lng","zoom","pixelRatio","devicePixelRatio","hMap","mapevents","Behavior","MapEvents","ui","UI","createDefault","dispose","showPolygon","lineString","geo","LineString","polygon","Polygon","style","fillColor","strokeColor","lineWidth","addObject","addPolygon","removeObject","className","ref","position","width","height","Sidebar","useDisclosure","isOpen","onOpen","onClose","btnRef","Flex","Button","m","onClick","cursor","color","w","h","Icon","name","mr","Text","fontSize","Drawer","placement","finalFocusRef","size","togglePolygon","variantColor","App","useState","showSidebar","toggleSidebarHandler","displayPolygon","togglePolygonHandler","toggleSidebar","background","Boolean","location","hostname","match","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.331489e4.chunk.js","sourcesContent":["import React, { useLayoutEffect, useRef } from 'react';\n\nconst Map = props => {\n  const currentMapRef = useRef(null);\n  const HRef = useRef(null);\n  const map = useRef(null);\n  const polygonRef = useRef(null);\n\n  const mapStyle = {\n    position: 'fixed',\n    width: '100%',\n    height: '100vh'\n  };\n\n  const addPolygon = () => {\n    const H = HRef.current;\n    const hMap = map.current;\n    const lineString = new H.geo.LineString(\n      [52, 13, 100, 48, 2, 100, 48, 16, 100, 52, 16, 100],\n    );\n\n    const polygon = new H.map.Polygon(lineString, {\n      style: {\n        fillColor: '#b3ffff',\n        strokeColor: '#bbb',\n        lineWidth: 4\n      }\n    });\n\n    // Add polygon to map, assign it to ref\n    hMap.addObject(polygon);\n    polygonRef.current = polygon;\n  };\n\n  const removePolygon = () => {\n    const hMap = map.current;\n    hMap.removeObject(polygonRef.current);\n  }\n\n  // re-renders map if currentMapRef changes\n  useLayoutEffect(() => {\n    if (!currentMapRef.current) return;\n\n    console.log('Rendering map');\n    HRef.current = window.H;\n    console.log(HRef.current);\n    const H = HRef.current;\n\n    const platform = new H.service.Platform({\n      apikey: 'B5nrcCmj3Oa1kwgLB1SHUEqg_6HuSx5BTv51MjDoQJM'\n    });\n    const defaultLayers = platform.createDefaultLayers();\n\n    map.current = new H.Map(currentMapRef.current, defaultLayers.vector.normal.map, {\n      center: { lat: 50, lng: 5 },\n      zoom: 4,\n      pixelRatio: window.devicePixelRatio || 1\n    });\n    const hMap = map.current;\n\n    const behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(hMap));\n\n    const ui = H.ui.UI.createDefault(hMap, defaultLayers);\n\n    // Cleanup to avoid memory leaks\n    return () => {\n      console.log('[Map] unmounting');\n      hMap.dispose();\n    };\n  }, [currentMapRef]);\n\n  // Hook to toggle polygon without re-rendering entire map\n  useLayoutEffect(() => {\n    console.log('[Updating polygon] => ', props.showPolygon);\n    if (props.showPolygon) {\n      addPolygon()\n    } else {\n      removePolygon();\n    }\n  }, [props.showPolygon]);\n\n  return (\n    <div className=\"map\" ref={currentMapRef} style={mapStyle} />\n  );\n};\n\nexport default Map;\n","import React, { useRef } from 'react';\n\nimport {\n  Button,\n  Drawer,\n  DrawerBody,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  useDisclosure,\n  Icon,\n  Text,\n  Flex,\n\n} from \"@chakra-ui/core\";\n\nconst Sidebar = props => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const btnRef = useRef();\n\n  return (\n    <Flex>\n      <Button\n        ref={btnRef}\n        m={2}\n        onClick={onOpen}\n        cursor=\"pointer\"\n        color=\"black\"\n        w={32}\n        h={8}>\n        <Icon\n          name=\"arrow-right\"\n          mr={2}/>\n        <Text fontSize=\"sm\">Show Sidebar</Text>\n      </Button>\n      <Drawer\n        isOpen={isOpen}\n        placement=\"left\"\n        onClose={onClose}\n        finalFocusRef={btnRef}>\n        <DrawerOverlay />\n        <DrawerContent >\n          <DrawerCloseButton\n            w={6}\n            h={6}\n            cursor=\"pointer\"/>\n          <DrawerHeader size=\"m\">View a Region of the Map</DrawerHeader>\n          <DrawerBody>\n            <Text>Click on the button below to show/hide the polygon displayed on the map</Text>\n            <Button\n              onClick={props.togglePolygon}\n              cursor=\"pointer\"\n              variantColor=\"blue\"\n              w={32}\n              h={8}\n              fontSize=\"sm\">Toggle Polygon</Button>\n          </DrawerBody>\n          <DrawerFooter>\n          </DrawerFooter>\n        </DrawerContent>\n      </Drawer>\n    </Flex>\n  );\n};\n\nexport default Sidebar;","import React, { useState } from 'react';\nimport './App.css';\n\nimport Map from './components/Map/Map';\nimport Sidebar from './components/Sidebar/Sidebar';\n\nfunction App() {\n  const [showSidebar, toggleSidebarHandler] = useState(true);\n  const [displayPolygon, togglePolygonHandler] = useState(true);\n\n  return (\n    <div className=\"App\">\n      <main className=\"App-main\">\n        <Map showPolygon={displayPolygon}/>\n        <Sidebar\n          togglePolygon={() => togglePolygonHandler(!displayPolygon)}\n          toggleSidebar={() => toggleSidebarHandler(!showSidebar)}\n          background=\"gray.300\"/>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ThemeProvider } from '@chakra-ui/core';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}